<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Recommend">

	<!-- 로그인한 회원번호(index_member)를 넣어서 회원취향분석테이블(member_keyword_anal_회원번호)을 조회한다.  -->
	<select id="getMemKeyAnal" parameterType="int" resultType="memKeyAnalDTO">
		select * from member_keyword_anal_${index_member} order by index_keyword
	</select>
	
	<!-- 작품별키워드분석테이블(keyword_anal)을 조회한다. -->
	<select id="getKeyAnal" resultType="keyAnalDTO">
		select * from keyword_anal order by index_book, index_keyword
	</select>
	
	<!-- 추천된 작품번호(index_book)리스트를 넣어서 작품정보를 받아온다. 리스트에 넣은 작품번호 순서대로 작품정보가 저장된다. -->
	<select id="getRecoBook" parameterType="list" resultType="detailDTO">
		select * from detail where index_book in
		<foreach collection="list" item="index_book" open="(" close=")" separator="," >
			#{index_book}
		</foreach>
		order by decode(index_book,
		<foreach collection="list" item="index_book" index="index" separator="," close=")">
			#{index_book}, ${index}
		</foreach>
	</select>
	
	<!-- 분석할 결과를 저장할 임시테이블(temp_anal_index_member)에 데이터가 있는지 확인한다. -->
	<select id="isTempAnal" parameterType="int" resultType="int">
		select count(*) from temp_anal_${index_member}
	</select>
	
	<!-- 분석할 결과를 저장할 임시테이블(temp_anal_index_member)을 생성한다. -->
	<insert id="createTempAnal" parameterType="int">
		create global temporary table temp_anal_${index_member}(
   		    index_book number,
   		    category number,
    		value number
		) on commit preserve rows
	</insert>
	
	<!-- 분석한 결과를 임시테이블(temp_anal_index_member)에 insert한다. -->
	<insert id="insertTempAnal" parameterType="list">
		<foreach collection="list" item="tempAnal" open="insert all" close="select * from dual" separator=" " >
			into temp_anal_${tempAnal.index_member} values 
			(#{tempAnal.index_book},#{tempAnal.category},#{tempAnal.value})
		</foreach>
	</insert>
	
	<!-- 임시테이블에서 연관도 오름차순으로 추천리스트를 받아온다. -->
	<select id="getRecoList" parameterType="int" resultType="tempAnalDTO">
		select * from (select index_book, max(value) value from temp_anal_${index_member} where category in (100,200,300)
    		group by index_book having max(value) > 0.8) order by value desc
	</select>
	
	<!-- 추천리스트에서 회원번호에 따라 제외할 작품목록(read Table의 관심없다(0), 다읽었다(3), 
	 	 rating Table의 회원(index_member)이 평점 준 작품들,
	 	 설문조사시 선택한 선호분량 (장편:1(300편 초과), 중편:2(100 ~ 300), 단편:3(100 미만), 아무거나:4)에 해당하지 않는 작품,
	 	 선호장르 (로맨스:1, 로판:2, 판타지:3, 현판:4, 무협:5)를 제외한 작품들)을 반환한다. -->
	<select id="getOutList" parameterType="outListDTO" resultType="outListDTO">
		select index_book from read_${index_member} where read in (0, 3)
			union select index_book from rating where index_member=#{index_member}
		    union select index_book from detail where genre in 
		<foreach collection="outGenre" item="outGenre" open="(" close=")" separator=",">
			#{outGenre}
		</foreach>
		    union select index_book
		    from (select f.index_book, f.title, f.image, f.genre, f.comple, f.times, f.rating_num, f.review_num,
		    s.times_grade from (select * from detail) f
		    join (select index_book, case when times <![CDATA[> ]]>300 then 1
		    when times between 100 and 300 then 2
		    when times <![CDATA[< ]]>100 then 3
		    end as times_grade
		    from detail) s
		    on f.index_book=s.index_book
		    where s.times_grade in
		<foreach collection="outVolume" item="outVolume" open="(" close=")" separator=",">
		    #{outVolume}
		</foreach>
		    )
	</select>
	
	<!-- survey 테이블에서 회원(index_member)의 정보를 불러온다. -->
	<select id="getSurvey" parameterType="int" resultType="surveyDTO">
		select * from survey where index_member = #{index_member} 
	</select>
	
	<!-- TempAnal 테이블의 데이터들을 지운다. -->
	<select id="clearValue" parameterType="int">
		truncate table temp_anal_${index_member}
	</select>

</mapper>